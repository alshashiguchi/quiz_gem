// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Login struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type NewUser struct {
	Name      string     `json:"name"`
	Email     string     `json:"email"`
	Username  string     `json:"username"`
	Password  string     `json:"password"`
	Access    Access     `json:"access"`
	Situation UserStatus `json:"situation"`
}

type RefreshTokenInput struct {
	Token string `json:"token"`
}

type User struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	Email     string     `json:"email"`
	Username  string     `json:"username"`
	Access    Access     `json:"access"`
	Situation UserStatus `json:"situation"`
}

type Access string

const (
	AccessStudent    Access = "STUDENT"
	AccessInstructor Access = "INSTRUCTOR"
	AccessAdmin      Access = "ADMIN"
)

var AllAccess = []Access{
	AccessStudent,
	AccessInstructor,
	AccessAdmin,
}

func (e Access) IsValid() bool {
	switch e {
	case AccessStudent, AccessInstructor, AccessAdmin:
		return true
	}
	return false
}

func (e Access) String() string {
	return string(e)
}

func (e *Access) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Access(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Access", str)
	}
	return nil
}

func (e Access) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusActive   UserStatus = "ACTIVE"
	UserStatusInactive UserStatus = "INACTIVE"
	UserStatusBlocked  UserStatus = "BLOCKED"
)

var AllUserStatus = []UserStatus{
	UserStatusActive,
	UserStatusInactive,
	UserStatusBlocked,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusActive, UserStatusInactive, UserStatusBlocked:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
